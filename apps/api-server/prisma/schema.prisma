// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define schema for RBAC for a multi tenant application
model Company {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  departments  Department[]
  roles        Role[]
  resources    Resource[]
  userAccounts User[]

  @@map("companies")
}

model Department {
  id                  String               @id @default(cuid())
  name                String               @unique
  description         String?
  company             Company              @relation(fields: [companyId], references: [id])
  companyId           String               @map("company_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  designations        Designation[]
  employeeDepartments EmployeeDepartment[]
  roles               Role[]

  @@unique([companyId, name])
  @@map("departments")
}

model EmployeeDepartment {
  id           String     @id @default(cuid())
  employee     Employee   @relation(fields: [employeeId], references: [id])
  employeeId   String     @map("employee_id")
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @map("department_id")
  startDate    DateTime   @map("start_date")
  endDate      DateTime?  @map("end_date")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([employeeId, departmentId])
  @@map("employee_departments")
}

model Designation {
  id                   String                @id @default(cuid())
  name                 String                @unique
  description          String?
  department           Department            @relation(fields: [departmentId], references: [id])
  departmentId         String                @map("department_id")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  employeeDesignations EmployeeDesignation[]
  reportsTo            Designation?          @relation("DesignationParent", fields: [reportsToId], references: [id])
  reportsToId          String?               @map("reports_to_id")
  reportees            Designation[]         @relation("DesignationParent")

  @@unique([departmentId, name])
  @@map("designations")
}

model EmployeeDesignation {
  id            String      @id @default(cuid())
  employee      Employee    @relation(fields: [employeeId], references: [id])
  employeeId    String      @map("employee_id")
  designation   Designation @relation(fields: [designationId], references: [id])
  designationId String      @map("designation_id")
  startDate     DateTime    @map("start_date")
  endDate       DateTime?   @map("end_date")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([employeeId, designationId])
  @@map("employee_designations")
}

model Role {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String?
  permissions  Permission[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  company      Company      @relation(fields: [companyId], references: [id])
  companyId    String       @map("company_id")
  department   Department?  @relation(fields: [departmentId], references: [id])
  departmentId String?      @map("department_id")
  userRoles    UserRole[]

  @@unique([companyId, name])
  @@map("roles")
}

model Resource {
  id          String       @id @default(cuid())
  uri         String
  description String?
  company     Company      @relation(fields: [companyId], references: [id])
  companyId   String       @map("company_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  permissions Permission[]

  @@unique([companyId, uri])
  @@map("resources")
}

model Permission {
  id          String         @id @default(cuid())
  type        PermissionType
  description String?
  resource    Resource       @relation(fields: [resourceId], references: [id])
  resourceId  String         @map("resource_id")
  roles       Role[]
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  @@unique([resourceId, type])
  @@map("permissions")
}

model User {
  id             String     @id @default(cuid())
  officialEmail  String     @unique @map("official_email")
  passwordHash   String     @map("password_hash")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  employeeRecord Employee?
  company        Company    @relation(fields: [companyId], references: [id])
  companyId      String     @map("company_id")
  assignedRoles  UserRole[]

  @@map("users")
}

model UserRole {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String    @map("role_id")
  startDate DateTime  @map("start_date")
  endDate   DateTime? @map("end_date")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Gender {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employees   Employee[]

  @@map("genders")
}

model Employee {
  id            String                @id @default(cuid())
  firstName     String                @map("first_name")
  middleName    String?               @map("middle_name")
  lastName      String                @map("last_name")
  gender        Gender?               @relation(fields: [genderId], references: [id])
  genderId      String?               @map("gender_id")
  dateOfBirth   DateTime?             @map("date_of_birth")
  bloodGroup    BloodGroup?           @map("blood_group")
  personalEmail String?               @unique @map("personal_email")
  userAccount   User                  @relation(fields: [userAccountId], references: [id])
  userAccountId String                @unique @map("user_account_id")
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  designations  EmployeeDesignation[]
  departments   EmployeeDepartment[]

  @@map("employees")
}

enum PermissionType {
  CREATE
  READ
  UPDATE
  DELETE

  @@map("permission_types")
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE

  @@map("blood_groups")
}
